type Query {
  # BERRIES
  getAllBerries: [BerryConnection!]!
  getBerry(id: Int, name: String): Berry
  getAllBerryFirmness: [BerryFirmnessConnection!]!
  getBerryFirmness(id: Int, name: String): BerryFirmness
  getAllBerryFlavors: [BerryFlavorConnection!]!
  getBerryFlavor(id: Int, name: String): BerryFlavor
  # CONTESTS
  getAllContestTypes: [ContestTypeConnection!]!
  getContestType(id: Int, name: String): ContestType
  getAllContestEffects: [ContestEffectConnection!]!
  getContestEffect(id: Int, name: String): ContestEffect
  getAllSuperContestEffects: [SuperContestEffectConnection!]!
  getSuperContestEffect(id: Int, name: String): SuperContestEffect
  # ENCOUNTERS
  getAllEncounterMethods: [EncounterMethodConnection!]!
  getEncounterMethod(id: Int, name: String): EncounterMethod
  getAllEncounterConditions: [EncounterConditionConnection!]!
  getEncounterCondition(id: Int, name: String): EncounterCondition
  getAllEncounterConditionValues: [EncounterConditionValueConnection!]!
  getEncounterConditionValue(id: Int, name: String): EncounterConditionValue
  # EVOLUTION
  getAllEvolutionChains: [EvolutionChainConnection!]!
  getEvolutionChain(id: Int, name: String): EvolutionChain
  getAllEvolutionTriggers: [EvolutionTriggerConnection!]!
  getEvolutionTrigger(id: Int, name: String): EvolutionTrigger
  # GAMES
  getAllGenerations: [GenerationConnection!]!
  getGeneration(id: Int, name: String): Generation
  getAllPokedexes: [PokedexConnection!]!
  getPokedex(id: Int, name: String): Pokedex
  getAllVersions: [VersionConnection!]!
  getVersion(id: Int, name: String): Version
  getAllVersionGroups: [VersionGroupConnection!]!
  getVersionGroup(id: Int, name: String): VersionGroup
  # ITEMS
  getAllItems: [ItemConnection!]!
  getItem(id: Int, name: String): Item
  getAllItemAttributes: [ItemAttributeConnection!]!
  getItemAttribute(id: Int, name: String): ItemAttribute
  getAllItemCategories: [ItemCategoryConnection!]!
  getItemCategory(id: Int, name: String): ItemCategory
  getAllItemFlingEffects: [ItemFlingEffectConnection!]!
  getItemFlingEffect(id: Int, name: String): ItemFlingEffect
  getAllItemPockets: [ItemPocketConnection!]!
  getItemPocket(id: Int, name: String): ItemPocket
  # LOCATIONS
  getAllLocations: [LocationConnection!]!
  getLocation(id: Int, name: String): Location
  getAllLocationAreas: [LocationAreaConnection!]!
  getLocationArea(id: Int, name: String): LocationArea
  getAllPalParkAreas: [PalParkAreaConnection!]!
  getPalParkArea(id: Int, name: String): PalParkArea
  getAllRegions: [RegionConnection!]!
  getRegion(id: Int, name: String): Region
  # MACHINES
  getAllMachines: [MachineConnection!]!
  getMachine(id: Int): Machine
  # MOVES
  getAllMoves: [MoveConnection!]!
  getMove(id: Int, name: String): Move
  getAllMoveAilments: [MoveAilmentConnection!]!
  getMoveAilment(id: Int, name: String): MoveAilment
  getAllMoveBattleStyles: [MoveBattleStyleConnection!]!
  getMoveBattleStyle(id: Int, name: String): MoveBattleStyle
  # COMMON
  getAllLanguages: [LanguageConnection!]!
  getLanguage(id: Int, name: String): Language
}

# Connections
type BerryConnection {
  name: String
  url: String
  node: Berry
}

type BerryFirmnessConnection {
  name: String
  url: String
  node: BerryFirmness
}

type BerryFlavorConnection {
  name: String
  url: String
  node: BerryFlavor
}

type ContestTypeConnection {
  name: String!
  url: String!
  node: ContestType!
}

type ContestEffectConnection {
  url: String!
  node: ContestEffect!
}

type SuperContestEffectConnection {
  url: String!
  node: SuperContestEffect!
}

type EncounterMethodConnection {
  name: String!
  url: String!
  node: EncounterMethod!
}

type EncounterConditionConnection {
  name: String!
  url: String!
  node: EncounterCondition!
}

type EncounterConditionValueConnection {
  name: String!
  url: String!
  node: EncounterConditionValue!
}

type EvolutionChainConnection {
  url: String!
  node: EvolutionChain!
}

type EvolutionTriggerConnection {
  name: String!
  url: String!
  node: EvolutionTrigger!
}

type GenerationConnection {
  name: String!
  url: String!
  node: Generation!
}

type PokedexConnection {
  name: String!
  url: String!
  node: Pokedex!
}

type VersionConnection {
  name: String!
  url: String!
  node: Version!
}

type VersionGroupConnection {
  name: String!
  url: String!
  node: VersionGroup!
}

type ItemConnection {
  name: String!
  url: String!
  node: Item!
}

type ItemAttributeConnection {
  name: String!
  url: String!
  node: ItemAttribute!
}

type ItemCategoryConnection {
  name: String!
  url: String!
  node: ItemCategory!
}

type ItemFlingEffectConnection {
  name: String!
  url: String!
  node: ItemFlingEffect!
}

type ItemPocketConnection {
  name: String!
  url: String!
  node: ItemPocket!
}

type LocationConnection {
  name: String!
  url: String!
  node: Location!
}

type LocationAreaConnection {
  name: String!
  url: String!
  node: LocationArea!
}

type PalParkAreaConnection {
  name: String!
  url: String!
  node: PalParkArea!
}

type RegionConnection {
  name: String!
  url: String!
  node: Region!
}

type MachineConnection {
  name: String!
  url: String!
  node: Machine!
}

type MoveConnection {
  name: String!
  url: String!
  node: Move!
}

type MoveAilmentConnection {
  name: String!
  url: String!
  node: MoveAilment!
}

type MoveBattleStyleConnection {
  name: String!
  url: String!
  node: MoveBattleStyle!
}

type LanguageConnection {
  name: String!
  url: String!
  node: Language!
}

# Common
type Language {
  id: ID!
  name: String!
  official: Boolean!
  iso639: String!
  iso3166: String!
  names: [Name!]!
}

type APIResource {
  url: String!
}

type NamedAPIResource {
  name: String!
  url: String!
}

type Name {
  name: String!
  language: LanguageConnection!
}

type Description {
  description: String!
  language: LanguageConnection!
}

type Effect {
  effect: String!
  language: LanguageConnection!
}

type Encounter {
  min_level: Int!
  max_level: Int!
  condition_values: [EncounterConditionValueConnection!]!
  chance: Int!
  method: EncounterMethodConnection!
}

type FlavorText {
  flavor_text: String!
  language: LanguageConnection!
  version: VersionConnection!
}

type GenerationGameIndex {
  game_index: Int!
  generation: GenerationConnection!
}

type MachineVersionDetail {
  machine: MachineConnection!
  version_group: VersionGroupConnection!
}

type VerboseEffect {
  effect: String!
  short_effect: String!
  language: LanguageConnection!
}

type VersionEncounterDetail {
  version: VersionConnection!
  max_chance: Int!
  encounter_details: Encounter!
}

type VersionGameIndex {
  game_index: Int!
  version: VersionConnection!
}

type VersionGroupFlavorText {
  text: String!
  language: LanguageConnection!
  version_group: VersionGroupConnection!
}

# Berries
type Berry {
  id: Int
  name: String
  growth_time: Int
  max_harvest: Int
  natural_gift_power: Int
  size: Int
  smoothness: Int
  soil_dryness: Int
  firmness: BerryFirmnessConnection
  flavors: [BerryFlavorMap]
  item: ItemConnection
  natural_gift_type: Type
}

type BerryFlavorMap {
  potency: Int
  flavor: BerryFlavorConnection
}

type BerryFirmness {
  id: Int!
  name: String!
  berries: [BerryConnection!]!
  names: [Name!]!
}

type BerryFlavor {
  id: Int!
  name: String!
  berries: [FlavorBerryMap!]!
  contest_type: ContestTypeConnection!
  names: [Name!]!
}

type FlavorBerryMap {
  potency: Int
  berry: BerryConnection
}

# Contests
type ContestType {
  id: Int!
  name: String!
  berry_flavor: BerryFlavorConnection!
  names: [ContestName!]!
}

type ContestName {
  name: String!
  color: String!
  language: LanguageConnection!
}

type ContestEffect {
  id: Int!
  appeal: Int!
  jam: Int!
  effect_entries: [Effect!]!
  flavor_text_entries: [FlavorText!]!
}

type SuperContestEffect {
  id: Int!
  appeal: Int!
  flavor_text_entries: [FlavorText!]!
  moves: [MoveConnection!]!
}

# Encounters
type EncounterMethod {
  id: Int!
  name: String!
  order: Int!
  names: [Name!]!
}

type EncounterCondition {
  id: Int!
  name: String!
  names: [Name!]!
  values: [EncounterConditionValueConnection!]!
}

type EncounterConditionValue {
  id: Int!
  name: String!
  condition: EncounterConditionConnection!
  names: [Name]!
}

#Evolution
type EvolutionChain {
  id: Int!
  baby_trigger_item: ItemConnection!
  chain: ChainLink!
}

type ChainLink {
  is_baby: Boolean!
  species: PokemonSpecies!
  evolution_details: [EvolutionDetail!]!
  evolves_to: [ChainLink!]!
}

type EvolutionDetail {
  item: ItemConnection!
  trigger: EvolutionTriggerConnection!
  gender: Int!
  held_item: ItemConnection!
  known_move: MoveConnection!
  known_move_type: Type!
  location: LocationConnection!
  min_level: Int!
  min_happiness: Int!
  min_beauty: Int!
  min_affection: Int!
  needs_overworld_rain: Boolean!
  party_species: PokemonSpecies!
  party_type: Type!
  relative_physical_stats: Int!
  time_of_day: String!
  trade_species: PokemonSpecies!
  turn_upside_down: Boolean!
}

type EvolutionTrigger {
  id: Int!
  name: String!
  names: [Name]!
  pokemon_species: [PokemonSpecies!]!
}

# Games
type Generation {
  id: Int!
  name: String!
  abilities: [Ability!]!
  names: [Name!]!
  main_region: RegionConnection!
  moves: [MoveConnection!]!
  pokemon_species: [PokemonSpecies!]!
  types: [Type!]!
  version_groups: [VersionGroupConnection!]!
}

type Pokedex {
  id: Int!
  name: String!
  is_main_series: Boolean!
  descriptions: [Description!]!
  names: [Name!]!
  pokemon_entries: [PokemonEntry]!
  region: RegionConnection!
  version_groups: [VersionGroupConnection]!
}

type PokemonEntry {
  entry_number: Int!
  pokemon_species: PokemonSpecies!
}

type Version {
  id: Int!
  name: String!
  names: [Name!]!
  version_group: VersionGroupConnection!
}

type VersionGroup {
  id: Int!
  name: String!
  order: Int!
  generation: GenerationConnection!
  move_learn_methods: [MoveLearnMethod]!
  pokedexes: [PokedexConnection!]!
  regions: [RegionConnection!]!
  versions: [VersionConnection!]!
}

# Items
type Item {
  id: Int!
  name: String!
  cost: Int!
  fling_power: Int!
  fling_effect: ItemFlingEffectConnection!
  attributes: [ItemAttributeConnection!]!
  category: ItemCategoryConnection!
  effect_entries: [VerboseEffect]!
  flavor_text_entries: [VersionGroupFlavorText!]!
  game_indices: [GenerationGameIndex!]!
  names: [Name!]!
  sprites: ItemSprites!
  held_by_pokemon: [ItemHolderPokemon!]!
  baby_trigger_for: EvolutionChain!
  machines: [MachineVersionDetail!]!
}

type ItemSprites {
  default: String!
}

type ItemHolderPokemon {
  pokemon: String!
  version_details: [ItemHolderPokemonVersionDetail!]!
}

type ItemHolderPokemonVersionDetail {
  rarity: String!
  version: VersionConnection!
}

type ItemAttribute {
  id: Int!
  name: String!
  items: [ItemConnection!]!
  names: [Name!]!
  descriptions: [Description!]!
}

type ItemCategory {
  id: Int!
  name: String!
  items: [ItemConnection!]!
  names: [Name!]!
  pocket: ItemPocketConnection!
}

type ItemFlingEffect {
  id: Int!
  name: String!
  effect_entries: [Effect!]!
  items: [ItemConnection!]!
}

type ItemPocket {
  id: Int!
  name: String!
  categories: [ItemCategoryConnection!]!
  names: [Name!]!
}

# Locations
type Location {
  id: Int!
  name: String!
  region: RegionConnection!
  names: [Name!]!
  game_indices: [GenerationGameIndex!]!
  areas: [LocationAreaConnection]!
}

type LocationArea {
  id: Int!
  name: String!
  game_index: Int!
  encounter_method_rates: [EncounterMethodRate!]!
  location: LocationConnection!
  names: [Name!]!
  pokemon_encounters: [PokemonEncounter!]!
}

type EncounterMethodRate {
  encounter_method: EncounterMethodConnection!
  version_details: [EncounterVersionDetails!]!
}

type EncounterVersionDetails {
  rate: Int!
  version: VersionConnection!
}

type PokemonEncounter {
  pokemon: Pokemon!
  version_details: [VersionEncounterDetail!]!
}

type PalParkArea {
  id: Int!
  name: String!
  names: [Name!]!
  pokemon_encounters: [PalParkEncounterSpecies]!
}

type PalParkEncounterSpecies {
  base_score: Int!
  rate: Int!
  pokemon_species: PokemonSpecies!
}

type Region {
  id: Int!
  name: String!
  names: [Name!]!
  locations: [LocationConnection!]!
  main_generation: GenerationConnection!
  pokedexes: [PokedexConnection!]!
  version_groups: [VersionGroupConnection]!
}

# Machines
type Machine {
  id: Int!
  item: ItemConnection!
  move: MoveConnection!
  version_group: VersionGroupConnection!
}

# Moves
type Move {
  id: Int!
  name: String!
  accuracy: Int
  effect_chance: Int
  pp: Int
  priority: Int
  power: Int
  contest_combos: ContestComboSets!
  contest_type: ContestType!
  contest_effect: ContestEffect!
  damage_class: MoveDamageClass!
  effect_entries: [VerboseEffect!]!
  effect_changes: [AbilityEffectChange!]!
  flavor_text_entries: [MoveFlavorText!]!
  generation: GenerationConnection!
  machines: [MachineVersionDetail!]!
  meta: MoveMetaData!
  names: [Name!]!
  past_values: [PastMoveStatValues!]!
  stat_changes: [MoveStatChange]!
  super_contest_effect: SuperContestEffect!
  target: MoveTarget!
  type: Type!
}

type ContestComboSets {
  normal: ContestComboDetail!
  super: ContestComboDetail!
}

type ContestComboDetail {
  use_before: [MoveConnection]!
  use_after: [MoveConnection]!
}

type MoveFlavorText {
  flavor_text: String!
  language: [MoveConnection!]!
  version_group: [MoveConnection!]!
}

type MoveMetaData {
  ailment: MoveAilmentConnection!
  category: MoveConnection!
  min_hits: Int!
  max_hits: Int!
  min_turns: Int!
  max_turns: Int!
  drain: Int!
  healing: Int!
  crit_rate: Int!
  ailment_chance: Int!
  flinch_chance: Int!
  stat_chance: Int!
}

type MoveStatChange {
  change: Int!
  stat: Stat!
}

type PastMoveStatValues {
  accuracy: Int!
  effect_chance: Int!
  power: Int!
  pp: Int!
  effect_entries: [VerboseEffect!]!
  type: Type!
  version_group: VersionGroupConnection!
}

type MoveAilment {
  id: Int!
  name: String!
  moves: [MoveConnection!]!
  names: [Name!]!
}

type MoveBattleStyle {
  id: Int!
  name: String!
  names: [Name!]!
}

type ModelName {
  id: Int!
  name: String!
  moves: [MoveConnection!]!
  descriptions: [Description!]!
}

type MoveDamageClass {
  id: Int!
  name: String!
  descriptions: [Description!]!
  moves: [MoveConnection!]!
  names: [Name!]!
}

type MoveLearnMethod {
  id: Int!
  name: String!
  descriptions: [Description!]!
  names: [Name!]!
  version_groups: [VersionGroupConnection]!
}

type MoveTarget {
  id: Int!
  name: String!
  descriptions: [Description!]!
  moves: [MoveConnection!]!
  names: [Name!]!
}

# Pokemon
type Ability {
  id: Int!
  name: String!
  is_main_series: Boolean!
  generation: GenerationConnection!
  names: [Name!]!
  effect_entries: [VerboseEffect!]!
  effect_changes: [AbilityEffectChange!]!
  flavor_text_entries: [AbilityFlavorText]!
  pokemon: [AbilityPokemon]!
}

type AbilityEffectChange {
  effect_entries: [Effect!]!
  version_group: VersionGroupConnection!
}

type AbilityFlavorText {
  flavor_text: String!
  language: LanguageConnection!
  version_group: VersionGroupConnection!
}

type AbilityPokemon {
  is_hidden: Boolean!
  slot: Int!
  pokemon: Pokemon!
}

type Characteristic {
  id: Int!
  gene_modulo: Int!
  possible_values: [Int!]!
}

type EggGroup {
  id: Int!
  name: String!
  names: [Name!]!
  pokemon_species: [PokemonSpecies!]!
}

type Gender {
  id: Int!
  name: String!
  pokemon_species_details: [PokemonSpeciesGender!]!
  required_for_evolution: [PokemonSpecies!]!
}

type PokemonSpeciesGender {
  rate: Int!
  pokemon_species: [PokemonSpecies!]!
}

type GrowthRate {
  id: Int!
  name: String!
  formula: String!
  descriptions: [Description!]!
  levels: [GrowthRateExperienceLevel]!
  pokemon_species: [PokemonSpecies!]!
}

type GrowthRateExperienceLevel {
  level: Int!
  experience: Int!
}

type Nature {
  id: Int!
  name: String!
  decreased_stat: Stat!
  increased_stat: Stat!
  hates_flavor: BerryFlavor!
  likes_flavor: BerryFlavor!
  pokeathlon_stat_changes: NatureStatChange!
  move_battle_style_preferences: MoveBattleStylePreference!
  names: [Name!]!
}

type NatureStatChange {
  max_change: Int!
  pokeathlon_stat: PokeathlonStat!
}

type MoveBattleStylePreference {
  low_hp_preference: Int!
  high_hp_preference: Int!
  move_battle_style: MoveBattleStyleConnection!
}

type PokeathlonStat {
  id: Int!
  name: String!
  names: [Name!]!
  affecting_natures: NaturePokeathlonStatAffectSets!
}

type NaturePokeathlonStatAffectSets {
  increase: [NaturePokeathlonStatAffect!]!
  decrease: [NaturePokeathlonStatAffect!]!
}

type NaturePokeathlonStatAffect {
  max_change: Int!
  nature: Nature!
}

type Pokemon {
  id: Int!
  name: String!
  base_experience: Int!
  height: Int!
  is_default: Boolean!
  order: Int!
  weight: Int!
  abilities: [PokemonAbility!]!
  forms: [PokemonForm!]!
  game_indices: [VersionGameIndex!]!
  held_items: [PokemonHeldItem!]!
  location_area_encounters: String!
  moves: [PokemonMove!]!
  sprites: PokemonSprites!
  species: PokemonSpecies!
  stats: [PokemonStat!]!
  types: [PokemonType!]!
}

type PokemonAbility {
  is_hidden: Boolean!
  slot: Int!
  ability: Ability!
}

type PokemonType {
  slot: Int!
  type: Type!
}

type PokemonHeldItem {
  item: ItemConnection!
  version_details: [PokemonHeldItemVersion!]!
}

type PokemonHeldItemVersion {
  version: VersionConnection!
  rarity: Int!
}

type PokemonMove {
  move: MoveConnection!
  version_group_details: [PokemonMoveVersion!]!
}

type PokemonMoveVersion {
  move_learn_method: MoveLearnMethod!
  version_group: VersionGroupConnection!
  level_learned_at: Int!
}

type PokemonStat {
  stat: Stat!
  effort: Int!
  base_stat: Int!
}

type PokemonSprites {
  front_default: String!
  front_shinyXXX: String!
  front_female: String!
  front_shiny_female: String!
  back_default: String!
  back_shiny: String!
  back_female: String!
  back_shiny_female: String!
}

type LocationAreaEncounter {
  location_area: LocationAreaConnection!
  version_details: [VersionEncounterDetail!]!
}

type PokemonColor {
  id: Int!
  name: String!
  names: [Name!]!
  pokemon_species: [PokemonSpecies!]!
}

type PokemonForm {
  id: Int!
  name: String!
  order: Int!
  form_order: Int!
  is_default: Boolean!
  is_battle_only: Boolean!
  is_mega: Boolean!
  form_name: String!
  pokemon: Pokemon!
  sprites: PokemonFormSprites!
  version_group: VersionGroupConnection!
  names: [Name!]!
  form_names: [Name!]!
}

type PokemonFormSprites {
  front_default: String!
  front_shiny: String!
  back_default: String!
  back_shiny: String!
}

type PokemonHabitat {
  id: Int!
  name: String!
  names: [Name!]!
  pokemon_species: [PokemonSpecies!]!
}

type PokemonShape {
  id: Int!
  name: String!
  awesome_names: [AwesomeName!]!
  names: [Name!]!
  pokemon_species: [PokemonSpecies!]!
}

type AwesomeName {
  awesome_name: String!
  language: LanguageConnection!
}

type PokemonSpecies {
  id: Int!
  name: String!
  order: Int!
  gender_rate: Int!
  capture_rate: Int!
  base_happiness: Int!
  is_baby: Boolean!
  hatch_counter: Int!
  has_gender_differences: Boolean!
  forms_switchable: Boolean!
  growth_rate: GrowthRate!
  pokedex_numbers: [PokemonSpeciesDexEntry!]!
  egg_groups: [EggGroup!]!
  color: PokemonColor!
  shape: PokemonShape!
  evolves_from_species: PokemonSpecies!
  evolution_chain: EvolutionChain!
  habitat: PokemonHabitat!
  generation: GenerationConnection!
  names: [Name!]!
  pal_park_encounters: [PalParkEncounterArea!]!
  flavor_text_entries: [FlavorText!]!
  form_descriptions: [Description]!
  genera: [Genus!]!
  varieties: [PokemonSpeciesVariety!]!
}

type Genus {
  genus: String!
  language: LanguageConnection!
}

type PokemonSpeciesDexEntry {
  entry_number: Int!
  pokedex: PokedexConnection!
}

type PalParkEncounterArea {
  base_score: Int!
  rate: Int!
  area: PalParkAreaConnection!
}

type PokemonSpeciesVariety {
  is_default: Boolean!
  pokemon: Pokemon!
}

type Stat {
  id: Int!
  name: String!
  game_index: Int!
  is_battle_only: Boolean!
  affecting_moves: MoveStatAffectSets!
  affecting_natures: NatureStatAffectSets!
  characteristics: Characteristic!
  move_damage_class: MoveDamageClass!
  names: [Name!]!
}

type MoveStatAffectSets {
  increase: [MoveStatAffect!]!
  decrease: [MoveStatAffect!]!
}

type MoveStatAffect {
  change: Int!
  move: MoveConnection!
}

type NatureStatAffectSets {
  increase: [Nature!]!
  decrease: [Nature!]!
}

type Type {
  id: Int!
  name: String!
  damage_relations: TypeRelations!
  game_indices: [GenerationGameIndex!]!
  generation: GenerationConnection!
  move_damage_class: MoveDamageClass!
  names: [Name!]!
  pokemon: [TypePokemon!]!
  moves: [MoveConnection!]!
}

type TypePokemon {
  slot: Int!
  pokemon: Pokemon!
}

type TypeRelations {
  no_damage_to: Type!
  half_damage_to: Type!
  double_damage_to: Type!
  no_damage_from: Type!
  half_damage_from: Type!
  double_damage_from: Type!
}
