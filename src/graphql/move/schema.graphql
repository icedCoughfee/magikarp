type Query {
  getAllMoves: [MoveConnection!]!
  getMove(id: Int, name: String): Move
  getAllMoveAilments: [MoveAilmentConnection!]!
  getMoveAilment(id: Int, name: String): MoveAilment
  getAllMoveBattleStyles: [MoveBattleStyleConnection!]!
  getMoveBattleStyle(id: Int, name: String): MoveBattleStyle
  getAllMoveCategories: [MoveCategoryConnection!]!
  getMoveCategory(id: Int, name: String): ModelName
  getAllMoveDamageClasses: [MoveDamageClassConnection!]!
  getMoveDamageClass(id: Int, name: String): MoveDamageClass
  getAllMoveLearnMethods: [MoveLearnMethodConnection!]!
  getMoveLearnMethod(id: Int, name: String): MoveLearnMethod
  getAllMoveTargets: [MoveTargetConnection!]!
  getMoveTarget(id: Int, name: String): MoveTarget
}

type Move {
  id: Int!
  name: String!
  accuracy: Int
  effect_chance: Int
  pp: Int
  priority: Int
  power: Int
  contest_combos: ContestComboSets!
  contest_type: ContestType!
  contest_effect: ContestEffect!
  damage_class: MoveDamageClassConnection!
  effect_entries: [VerboseEffect!]!
  effect_changes: [AbilityEffectChange!]!
  flavor_text_entries: [MoveFlavorText!]!
  generation: GenerationConnection!
  machines: [MachineVersionDetail!]!
  meta: MoveMetaData!
  names: [Name!]!
  past_values: [PastMoveStatValues!]!
  stat_changes: [MoveStatChange]!
  super_contest_effect: SuperContestEffect!
  target: MoveTargetConnection!
  type: TypeConnection!
}

type ContestComboSets {
  normal: ContestComboDetail!
  super: ContestComboDetail!
}

type ContestComboDetail {
  use_before: [MoveConnection]!
  use_after: [MoveConnection]!
}

type MoveFlavorText {
  flavor_text: String!
  language: [MoveConnection!]!
  version_group: [MoveConnection!]!
}

type MoveMetaData {
  ailment: MoveAilmentConnection!
  category: MoveConnection!
  min_hits: Int!
  max_hits: Int!
  min_turns: Int!
  max_turns: Int!
  drain: Int!
  healing: Int!
  crit_rate: Int!
  ailment_chance: Int!
  flinch_chance: Int!
  stat_chance: Int!
}

type MoveStatChange {
  change: Int!
  stat: StatConnection!
}

type PastMoveStatValues {
  accuracy: Int!
  effect_chance: Int!
  power: Int!
  pp: Int!
  effect_entries: [VerboseEffect!]!
  type: TypeConnection!
  version_group: VersionGroupConnection!
}

type MoveAilment {
  id: Int!
  name: String!
  moves: [MoveConnection!]!
  names: [Name!]!
}

type MoveBattleStyle {
  id: Int!
  name: String!
  names: [Name!]!
}

type ModelName {
  id: Int!
  name: String!
  moves: [MoveConnection]
  descriptions: [Description!]!
}

type MoveDamageClass {
  id: Int!
  name: String!
  descriptions: [Description!]!
  moves: [MoveConnection!]!
  names: [Name!]!
}

type MoveLearnMethod {
  id: Int!
  name: String!
  descriptions: [Description!]!
  names: [Name!]!
  version_groups: [VersionGroupConnection]!
}

type MoveTarget {
  id: Int!
  name: String!
  descriptions: [Description!]!
  moves: [MoveConnection!]!
  names: [Name!]!
}

# CONNECTORS
type MoveConnection {
  name: String!
  url: String!
  node: Move!
}

type MoveAilmentConnection {
  name: String!
  url: String!
  node: MoveAilment!
}

type MoveBattleStyleConnection {
  name: String!
  url: String!
  node: MoveBattleStyle!
}

type MoveCategoryConnection {
  name: String!
  url: String!
  node: ModelName!
}

type MoveDamageClassConnection {
  name: String!
  url: String!
  node: MoveDamageClass!
}

type MoveLearnMethodConnection {
  name: String!
  url: String!
  node: MoveLearnMethod!
}

type MoveTargetConnection {
  name: String!
  url: String!
  node: MoveTarget!
}
